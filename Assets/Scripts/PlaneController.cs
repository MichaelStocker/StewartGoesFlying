using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using TMPro;
using Unity.VisualScripting;

public class PlaneController : MonoBehaviour
{
    [Header("Flying Obj Stats")]
    [Tooltip("How much the speed ramps up or down")]
    public float throttleIncriment = 0.1f;
    [Tooltip("Maximum speed of the object")]
    public float maxThrust = 200f;
    [Tooltip("How responsive the object is to directional movement")]
    public float responsiveness = 100f;
    [Tooltip("Lift generated by the object dependant on it's speed")]
    public float lift = 135f;

    public GameObject altimeterObj;
    public LayerMask terrainLayer;

    private float throttle;
    private float yaw;
    private float pitch;
    private float roll;

    private float responseModifier
    {
        get 
        {
            return (rb.mass / 10f) * responsiveness;
        }
    }

    Rigidbody rb;
    [SerializeField] TextMeshProUGUI hud;

    private void Awake()
    {
        rb = GetComponent<Rigidbody>();
    }

    private void InputHandling()
    {
        // Set Rotational values from out inputs

        yaw = Input.GetAxis("Yaw");
        pitch = Input.GetAxis("Pitch");
        roll = Input.GetAxis("Roll");

        if (Input.GetKey(KeyCode.Space)) throttle += throttleIncriment;
        else if (Input.GetKey(KeyCode.LeftControl)) throttle -= throttleIncriment;

        throttle = Mathf.Clamp(throttle, 0f, 100f);
    }

    private void Update()
    {
        InputHandling();
        UpdateHUD();
    }

    private void FixedUpdate()
    {
        // Apply Forces
        rb.AddForce(transform.forward * maxThrust * throttle);
        rb.AddTorque(transform.up * yaw * responsiveness);
        rb.AddTorque(transform.right * pitch * responsiveness);
        rb.AddTorque(-transform.forward * roll * responsiveness);

        rb.AddForce(Vector3.up * rb.velocity.magnitude * lift);
    }

    private void UpdateHUD()
    {
        hud.text = "Throttle: " + throttle.ToString("F0") + "\n";
        hud.text += "Airspeed: " + (rb.velocity.magnitude * 3.6f).ToString("F0") + " km/h\n";
        //hud.text += "Altitude: " + transform.position.y.ToString("F0");
        RaycastHit hit;
        if (Physics.Raycast(transform.position,Vector3.down,out hit,Mathf.Infinity,terrainLayer))
        {
            //Debug.DrawLine(altimeterObj.transform.position, hit.point);
            Debug.Log(hit.collider.gameObject.name);
            hud.text += "Altitude: " + (altimeterObj.transform.position - hit.point).magnitude.ToString("F0");
        }
    }
}
