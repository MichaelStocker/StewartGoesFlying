using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using TMPro;
using Unity.VisualScripting;
using UnityEngine.InputSystem;

public class PlaneController : MonoBehaviour
{
    [Header("Flying Obj Stats")]
    [Tooltip("How much the speed ramps up or down")]
    public float throttleIncriment = 0.1f;
    [Tooltip("Maximum speed of the object")]
    public float maxThrust = 200f;
    [Tooltip("How responsive the object is to directional movement")]
    public float responsiveness = 100f;
    [Tooltip("Lift generated by the object dependant on it's speed")]
    public float lift = 135f;

    [SerializeField] Animator animator;
    [SerializeField] GameObject landingCollider;
    [SerializeField] Collider[] collArr;
    public GameObject bellyObj;
    public GameObject altimeterObj;
    public LayerMask terrainLayer;

    

    private bool isGrounded;
    private float throttle;
    private float yaw;
    private float pitch;
    private float roll;

    int currentAlt;
    int currentSpeed;
    int currentThrottle;


    float rollAmount;
    float pitchAmount;

    private float responseModifier
    {
        get
        {
            return (rb.mass / 10f) * responsiveness;
        }
    }

    Rigidbody rb;
    [SerializeField] TextMeshProUGUI hud;

    private void Awake()
    {
        rb = GetComponent<Rigidbody>();
        PlatformController.singleton.Init("COM3", 115200);
    }

    private void InputHandling()
    {
        // Set Rotational values from out inputs
        if (Input.GetKeyDown(KeyCode.Joystick2Button4)) // Button 4
        {
            if (animator.GetBool("isFlying") && currentAlt <= 6 && currentThrottle == 0)
            {
                landingCollider.SetActive(true);
                for (int i = 0; i < collArr.Length; i++) collArr[i].enabled = false;

                animator.SetBool("isFlying", false);
                animator.SetBool("isFlapping", false);
            }
            else
            {
                landingCollider.SetActive(false);
                for (int i = 0; i < collArr.Length; i++) collArr[i].enabled = true;
                animator.SetBool("isFlying", true);
                animator.SetBool("isFlapping", true);
               rb.AddForce(Vector3.up * 5, ForceMode.VelocityChange);
            }
        }

        if (animator.GetBool("isFlying"))
        {
            throttle += throttleIncriment * Input.GetAxis("Throttle");
        }

        yaw = Input.GetAxis("Yaw");
        pitch = Input.GetAxis("Pitch");
        roll = Input.GetAxis("Roll");

        throttle = Mathf.Clamp(throttle, 0f, 100f);
    }

    private void Update()
    {
        InputHandling();
        UpdateHUD();
        rollAmount = Mathf.DeltaAngle(transform.eulerAngles.z, 0);
        pitchAmount = -Mathf.DeltaAngle(transform.eulerAngles.x, 0);
        print("Roll: " + rollAmount);
        print("Pitch: " + pitchAmount);
        print(Input.GetAxis("Throttle"));
        PlatformController.singleton.Roll = PlatformController.singleton.MapRange(rollAmount, -45, 45, -10, 10);
        PlatformController.singleton.Pitch = PlatformController.singleton.MapRange(-pitchAmount, -55, 55, -10, 10);
    }

    private void FixedUpdate()
    {
        //float rollAmount = Mathf.DeltaAngle(transform.eulerAngles.z, 0);
        //float pitchAmount = -Mathf.DeltaAngle(transform.eulerAngles.x, 0);
        // Apply Forces
        //PlatformController.singleton.Roll = PlatformController.singleton.MapRange(rollAmount,-40,40,-10,10);
        //PlatformController.singleton.Pitch = PlatformController.singleton.MapRange(-pitchAmount,-40,40,-10,10);
        
        if (animator.GetBool("isFlying"))
        {
            rb.AddForce(transform.forward * maxThrust * throttle);
            rb.AddTorque(transform.up * yaw * responsiveness);
            
            rb.AddTorque(transform.right * pitch * responsiveness);
           
            rb.AddTorque(-transform.forward * roll * responsiveness);
     
            rb.AddForce(Vector3.up * rb.velocity.magnitude * lift);
        }
    }

    private void UpdateHUD()
    {
        currentThrottle = (int)throttle;
        currentSpeed = (int)(rb.velocity.magnitude * 3.6f);
        RaycastHit hit;
        if (Physics.Raycast(transform.position, Vector3.down, out hit, Mathf.Infinity, terrainLayer))
        {
            currentAlt = (int)(altimeterObj.transform.position - hit.point).magnitude;
        }

        hud.text = "Throttle: " + currentThrottle + "\n";
        hud.text += "Airspeed: " + currentSpeed + " km/h\n";
        hud.text += "Altitude: " + currentAlt;
    }
}
